/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TeacherImport } from './routes/teacher'
import { Route as RoleImport } from './routes/role'
import { Route as QuizImport } from './routes/quiz'
import { Route as LandingImport } from './routes/landing'
import { Route as FlashcardImport } from './routes/flashcard'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TeacherRoute = TeacherImport.update({
  id: '/teacher',
  path: '/teacher',
  getParentRoute: () => rootRoute,
} as any)

const RoleRoute = RoleImport.update({
  id: '/role',
  path: '/role',
  getParentRoute: () => rootRoute,
} as any)

const QuizRoute = QuizImport.update({
  id: '/quiz',
  path: '/quiz',
  getParentRoute: () => rootRoute,
} as any)

const LandingRoute = LandingImport.update({
  id: '/landing',
  path: '/landing',
  getParentRoute: () => rootRoute,
} as any)

const FlashcardRoute = FlashcardImport.update({
  id: '/flashcard',
  path: '/flashcard',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/flashcard': {
      id: '/flashcard'
      path: '/flashcard'
      fullPath: '/flashcard'
      preLoaderRoute: typeof FlashcardImport
      parentRoute: typeof rootRoute
    }
    '/landing': {
      id: '/landing'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof LandingImport
      parentRoute: typeof rootRoute
    }
    '/quiz': {
      id: '/quiz'
      path: '/quiz'
      fullPath: '/quiz'
      preLoaderRoute: typeof QuizImport
      parentRoute: typeof rootRoute
    }
    '/role': {
      id: '/role'
      path: '/role'
      fullPath: '/role'
      preLoaderRoute: typeof RoleImport
      parentRoute: typeof rootRoute
    }
    '/teacher': {
      id: '/teacher'
      path: '/teacher'
      fullPath: '/teacher'
      preLoaderRoute: typeof TeacherImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/flashcard': typeof FlashcardRoute
  '/landing': typeof LandingRoute
  '/quiz': typeof QuizRoute
  '/role': typeof RoleRoute
  '/teacher': typeof TeacherRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/flashcard': typeof FlashcardRoute
  '/landing': typeof LandingRoute
  '/quiz': typeof QuizRoute
  '/role': typeof RoleRoute
  '/teacher': typeof TeacherRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/flashcard': typeof FlashcardRoute
  '/landing': typeof LandingRoute
  '/quiz': typeof QuizRoute
  '/role': typeof RoleRoute
  '/teacher': typeof TeacherRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/flashcard'
    | '/landing'
    | '/quiz'
    | '/role'
    | '/teacher'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/flashcard'
    | '/landing'
    | '/quiz'
    | '/role'
    | '/teacher'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/flashcard'
    | '/landing'
    | '/quiz'
    | '/role'
    | '/teacher'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  FlashcardRoute: typeof FlashcardRoute
  LandingRoute: typeof LandingRoute
  QuizRoute: typeof QuizRoute
  RoleRoute: typeof RoleRoute
  TeacherRoute: typeof TeacherRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  FlashcardRoute: FlashcardRoute,
  LandingRoute: LandingRoute,
  QuizRoute: QuizRoute,
  RoleRoute: RoleRoute,
  TeacherRoute: TeacherRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/flashcard",
        "/landing",
        "/quiz",
        "/role",
        "/teacher"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/flashcard": {
      "filePath": "flashcard.tsx"
    },
    "/landing": {
      "filePath": "landing.tsx"
    },
    "/quiz": {
      "filePath": "quiz.tsx"
    },
    "/role": {
      "filePath": "role.tsx"
    },
    "/teacher": {
      "filePath": "teacher.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
